{
  "hash": "6cb9d1eb98f69d1ccf88e2f4beca6700",
  "result": {
    "markdown": "---\ntitle: \"Visualizing indirect effects\"\ndescription: \"How do we quantify and visualize indirect effects in a path analysis when relationships are non-linear? Worse yet; non-monotonous?\"\nauthor:\n  - name: Allen Bush-Beaupré\n    url: https://abushbeaupre.github.io/\n    orcid: 0000-0001-6989-9278\ndate: 10-31-2023\ncategories: [data viz, indirect effects, method development] # self-defined categories\ncitation: \n  url: https://abushbeaupre.github.io/posts/indirect_effects/ \nimage: Y_X_anim.gif\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nformat: \n  html: \n    code-fold: TRUE\n---\n\n\nStart by loading the pertinent packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list=ls()) # clear workspace\nlibrary(tidyverse) # data manipulation and plotting\nlibrary(glmmTMB) # frequentist glmms\nlibrary(patchwork) #multiple plots\nlibrary(ggdist) # nice dots in logistic regression\nlibrary(tidylog) # log changes done during data wrangling\nlibrary(mgcv) # gamms\nlibrary(gratia) # gam predictions\n```\n:::\n\n\nFirst, we will simulate data from this DAG:\n\nINSERT DAG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(333) # set seed to reproduce the simulations exactly\nn <- 3000 # sample size\nX <- rnorm(n, 0, 1) # define K as a Z-score\nY <- rpois(n, exp(4 + 0.5*X)) # Y is a poisson variable whose link is the log function so defining the coefficients using the inverse log (exponential)\nK <- rbinom(n, size = 1, prob = plogis(-3 + 0.03*X + 0.05*Y)) # K is a Bernoulli variable whose link is the logit so defining the coefficients using the inverse logit (plogis)\n\ndata <- tibble(\n  X = X,\n  Y = Y,\n  K = K,\n  K_1 = 1 - K\n)\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n        X     Y     K   K_1\n    <dbl> <int> <int> <dbl>\n1 -0.0828    42     0     1\n2  1.93     151     1     0\n3 -2.05      20     0     1\n4  0.278     65     0     1\n5 -1.53      22     0     1\n6 -0.269     56     0     1\n```\n:::\n:::\n\n\nNow, we want to model this path analysis\n\nModel for Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmY_X <- glmmTMB(Y ~ X, family = poisson, data = data)\nsummary(mY_X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: poisson  ( log )\nFormula:          Y ~ X\nData: data\n\n     AIC      BIC   logLik deviance df.resid \n 20576.1  20588.1 -10286.1  20572.1     2998 \n\n\nConditional model:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) 3.997055   0.002606    1534   <2e-16 ***\nX           0.499396   0.002281     219   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nModel for K\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmK_XY <- glmmTMB(cbind(K, K_1) ~ X + Y, family = binomial, data = data)\nsummary(mK_XY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: binomial  ( logit )\nFormula:          cbind(K, K_1) ~ X + Y\nData: data\n\n     AIC      BIC   logLik deviance df.resid \n  3243.0   3261.0  -1618.5   3237.0     2997 \n\n\nConditional model:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -2.682855   0.284409  -9.433   <2e-16 ***\nX            0.075036   0.133618   0.562    0.574    \nY            0.045318   0.004856   9.332   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nNotice the p-value for X\n\nExtract predictions of Y \\~ X\n\nHere, I use a long-winded way to compute the predictions to show how it is done\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#create dataframe with values of X for which we want to predict Y\nnew_dat_Y_X <- tibble(X = seq(from = min(data$X), to = max(data$X), length.out = 30)) \n\n#predict Y but on the link scale (log) to calculate confidence intervals\npred_new_dat_Y_X <- predict(mY_X, newdata = new_dat_Y_X, type = \"link\", se.fit = TRUE)\n\n#extract the inverse link function for the model (exponential in this case) \nilink<- family(mY_X)$linkinv\n# bind the dataframes with values of X and the predicted Y values\npredictions_Y_X <- cbind(new_dat_Y_X,data.frame(pred_new_dat_Y_X)) %>%\n  #calculate the confidence intervals on the log scale and exponentiate\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n```\n:::\n\n\nPlot\n\n\n::: {.cell}\n\n```{.r .cell-code}\npY_X <- ggplot() +\n  geom_line(data = predictions_Y_X, aes(y = Pred, x = X)) +\n  geom_ribbon(data = predictions_Y_X, aes(ymin = CI.low, ymax = CI.up, x = X)) +\n  geom_point(data = data, aes(x = X, y = Y), alpha = 0.2) +\n  theme_classic() +\n  labs(title = \"Effect of X on Y\")\n\npY_X\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNow, the conditional (direct) effect of X on K\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_dat_K_X <- tibble(X = seq(from = min(data$X), to = max(data$X), length.out = 30),\n                      Y = mean(data$Y)) # set y to its mean to \n\npred_new_dat_K_X <- predict(mK_XY, newdata = new_dat_K_X, type = \"link\", se.fit = TRUE)\n\nilink<- family(mK_XY)$linkinv\npredictions_K_X <- cbind(new_dat_K_X,data.frame(pred_new_dat_K_X)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n\n\npK_X <- ggplot() +\n  stat_dots(data = data,\n            aes(y = K,\n                x = X,\n                side = ifelse(K_1 == 0, \"bottom\", \"top\")),\n            size = 2)+\n  geom_line(data = predictions_K_X, aes(y = Pred, x = X)) +\n  geom_ribbon(data = predictions_K_X, aes(ymin = CI.low, ymax = CI.up, x = X)) +\n  \n  theme_classic() +\n  labs(title = \"Conditional effect of X on K\")\n\npK_X \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWhat about the conditional (direct) effect of Y on K ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_dat_K_Y <- tibble(Y = seq(from = min(data$Y), to = max(data$Y), length.out = 30),\n                      X = mean(data$X)) # set X to its mean\n\npred_new_dat_K_Y <- predict(mK_XY, newdata = new_dat_K_Y, type = \"link\", se.fit = TRUE)\n\nilink<- family(mK_XY)$linkinv\npredictions_K_Y <- cbind(new_dat_K_Y,data.frame(pred_new_dat_K_Y)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n\npK_Y <- ggplot() +\n  stat_dots(data = data,\n            aes(y = K,\n                x = Y,\n                side = ifelse(K_1 == 0, \"bottom\", \"top\")),\n            size = 2)+\n  geom_line(data = predictions_K_Y, aes(y = Pred, x = Y)) +\n  geom_ribbon(data = predictions_K_Y, aes(ymin = CI.low, ymax = CI.up, x = Y)) +\n  theme_classic() +\n  labs(title = \"Conditional effect of Y on K\")\n\npK_Y \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nSo this is the direct effect of Y on K. But, remember that Y is caused by X so it may be of interest to see how X affects K indirectly, through Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\npY_X\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe first step is to select values of Y that are predicted by X\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCOLS <- alpha(colorRampPalette(c(\"blue\",\"red\"))(30),0.6)\npY_X + geom_point(data = predictions_Y_X, aes(y = Pred, x = X, color = X), size = 4) +scale_color_gradientn(colours = COLS)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThe next step is actually quite simple. We generate predictions for K as a function of the predictions of Y \\~ X\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nnew_dat_K_YX <- tibble(Y = predictions_Y_X$Pred, # predicted mean Y from X\n                      X = mean(data$X)) # set X to its mean\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npred_new_dat_K_YX <- predict(mK_XY, newdata = new_dat_K_YX, type = \"link\", se.fit = TRUE)\n\nilink<- family(mK_XY)$linkinv\npredictions_K_YX <- cbind(new_dat_K_YX,data.frame(pred_new_dat_K_YX)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n```\n:::\n\n\nNow, we need the values of X that were associated with the predicted values of Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_K_YX <- select(predictions_K_YX, c(Y, Pred)) %>%\n  left_join(predictions_Y_X %>% \n              select(X, Pred) %>% \n              rename(Y = Pred), \n            by = \"Y\")\n\npred_K_YX\n```\n:::\n\n\nNow, we simply superimpose both graphs of K \\~ Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\npK_Y \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npK_Y + geom_line(data = pred_K_YX, aes(x = Y, y = Pred, color = X), linewidth= 2) +\n  labs(title = \"Indirect effect of X on K through Y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}