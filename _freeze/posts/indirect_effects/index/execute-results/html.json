{
  "hash": "c10bee1cfc13538de64d552e0208426b",
  "result": {
    "markdown": "---\ntitle: \"Visualizing indirect effects\"\ndescription: \"How do we quantify and visualize indirect effects in a path analysis when relationships are non-linear? Worse yet; non-monotonous?\"\nauthor:\n  - name: Allen Bush-Beaupré\n    url: https://abushbeaupre.github.io/\n    orcid: 0000-0001-6989-9278\ndate: 10-31-2023\ncategories: [data viz, indirect effects, method development] # self-defined categories\ncitation: \n  url: https://abushbeaupre.github.io/posts/indirect_effects/ \nimage: Y_X_anim.gif\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nformat: \n  html: \n    code-fold: TRUE\n---\n\n\nWhen fitting a model (ex. glm) in a causal inference context, we are either estimating the direct or total effect of a given variable. For example, in a DAG such as this one:\n\n![](images/raw_DAG.png)\n\nWe can estimate the direct effect of X on K by fitting a model such as\n\n`lm(K ~ X + Y)`\n\nIn this case, we estimate the *direct* effect of X on K as we are controlling for Y. Such is the nature of (generalized) linear models.\n\nIf we want to estimate the total effect of X on K, we simply fit the model\n\n`lm(K ~ X)`\n\nIn this case, as we are ignoring Y, we estimate the direct effect of X + its indirect effect through Y (the total effect).\n\nBut what if we are interested in looking at the *indirect* effects?\n\nAs François Briau once told me, the study of Ecology ***is*** the study of direct and indirect effects. We just don't really do it formally.\n\nLuckily, Bill Shipley has spent quite a bit of brain power in quantifying direct, indirect and total effects which is what we call Path Analysis.\n\n[![The great Bill Shipley](images/Screenshot (1).png)](https://www.youtube.com/watch?v=upmPlBSoNRI&ab_channel=CarnegieMellonUniversityDepartmentofPhilosophy)\n\nVery briefly, to calculate indirect effects in along a path (ex. TSF -\\> Sphagnum cover -\\> forest floor thickness), one must multiply the (standardized) coefficients along that path. In this case, 0.073 \\* 0.164 = 0.011972\n\n![N. Fenton et al. / Forest Ecology and Management 213 (2005) 151--159](example_DAG.png){width=\"698\"}\n\nBut what does that number represent? When all relationships are linear, that value represents a slope. When the relationship(s) is/are not linear (ex. Poisson and logistic regressions), the value represents the slope on the link scale (log or logit or other). On the response scale, the slope is not constant through the entire relationship (we will see later). So how do we interpret such indirect effects if they are not on the scale of the variable we measured?\n\nStart by loading the pertinent packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list=ls()) # clear workspace\nlibrary(tidyverse) # data manipulation and plotting\nlibrary(glmmTMB) # frequentist glmms\nlibrary(patchwork) #multiple plots\nlibrary(ggdist) # nice dots in logistic regression\nlibrary(tidylog) # log changes done during data wrangling\nlibrary(mgcv) # gamms\nlibrary(gratia) # gam predictions\n```\n:::\n\n\nFirst, we will simulate data from this DAG:\n\n![](images/raw_DAG-01.png)\n\nBut these are just letters - BORING\n\nThe DAG could also be\n\n![](ecoevo_teaser.png)\n\nor\n\n![](DAG_WAZO.png)\n\nYou don\\`t have to think too hard to see this type of relationship in your own work.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(333) # set seed to reproduce the simulations exactly\nn <- 3000 # sample size\nX <- rnorm(n, 0, 1) # define K as a Z-score\nY <- rpois(n, exp(4 + 0.5*X)) # Y is a poisson variable whose link is the log function so defining the coefficients using the inverse log (exponential)\nK <- rbinom(n, size = 1, prob = plogis(-3 + 0.03*X + 0.05*Y)) # K is a Bernoulli variable whose link is the logit so defining the coefficients using the inverse logit (plogis)\n\ndata <- tibble(\n  X = X,\n  Y = Y,\n  K = K,\n  K_1 = 1 - K\n)\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n        X     Y     K   K_1\n    <dbl> <int> <int> <dbl>\n1 -0.0828    42     0     1\n2  1.93     151     1     0\n3 -2.05      20     0     1\n4  0.278     65     0     1\n5 -1.53      22     0     1\n6 -0.269     56     0     1\n```\n:::\n:::\n\n\nNow, we want to model this path analysis\n\nModel for Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmY_X <- glmmTMB(Y ~ X, family = poisson, data = data)\nsummary(mY_X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: poisson  ( log )\nFormula:          Y ~ X\nData: data\n\n     AIC      BIC   logLik deviance df.resid \n 20576.1  20588.1 -10286.1  20572.1     2998 \n\n\nConditional model:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) 3.997055   0.002606    1534   <2e-16 ***\nX           0.499396   0.002281     219   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nModel for K\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmK_XY <- glmmTMB(cbind(K, K_1) ~ X + Y, family = binomial, data = data)\nsummary(mK_XY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: binomial  ( logit )\nFormula:          cbind(K, K_1) ~ X + Y\nData: data\n\n     AIC      BIC   logLik deviance df.resid \n  3243.0   3261.0  -1618.5   3237.0     2997 \n\n\nConditional model:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -2.682855   0.284409  -9.433   <2e-16 ***\nX            0.075036   0.133618   0.562    0.574    \nY            0.045318   0.004856   9.332   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nNotice the p-value for X\n\nExtract predictions of Y \\~ X\n\nHere, I use a long-winded way to compute the predictions to show how it is done\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#create dataframe with values of X for which we want to predict Y\nnew_dat_Y_X <- tibble(X = seq(from = min(data$X), to = max(data$X), length.out = 30)) \n\n#predict Y but on the link scale (log) to calculate confidence intervals\npred_new_dat_Y_X <- predict(mY_X, newdata = new_dat_Y_X, type = \"link\", se.fit = TRUE)\n\n#extract the inverse link function for the model (exponential in this case) \nilink<- family(mY_X)$linkinv\n# bind the dataframes with values of X and the predicted Y values\npredictions_Y_X <- cbind(new_dat_Y_X,data.frame(pred_new_dat_Y_X)) %>%\n  #calculate the confidence intervals on the log scale and exponentiate\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n```\n:::\n\n\nPlot\n\n\n::: {.cell}\n\n```{.r .cell-code}\npY_X <- ggplot() +\n  geom_line(data = predictions_Y_X, aes(y = Pred, x = X)) +\n  geom_ribbon(data = predictions_Y_X, aes(ymin = CI.low, ymax = CI.up, x = X)) +\n  geom_point(data = data, aes(x = X, y = Y), alpha = 0.2) +\n  theme_classic() +\n  labs(title = \"Effect of X on Y\")\n\npY_X\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNow, the conditional (direct) effect of X on K\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_dat_K_X <- tibble(X = seq(from = min(data$X), to = max(data$X), length.out = 30),\n                      Y = mean(data$Y)) # set y to its mean to \n\npred_new_dat_K_X <- predict(mK_XY, newdata = new_dat_K_X, type = \"link\", se.fit = TRUE)\n\nilink<- family(mK_XY)$linkinv\npredictions_K_X <- cbind(new_dat_K_X,data.frame(pred_new_dat_K_X)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n\n\npK_X <- ggplot() +\n  stat_dots(data = data,\n            aes(y = K,\n                x = X,\n                side = ifelse(K_1 == 0, \"bottom\", \"top\")),\n            size = 2)+\n  geom_line(data = predictions_K_X, aes(y = Pred, x = X)) +\n  geom_ribbon(data = predictions_K_X, aes(ymin = CI.low, ymax = CI.up, x = X)) +\n  \n  theme_classic() +\n  labs(title = \"Conditional effect of X on K\")\n\npK_X \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWhat about the conditional (direct) effect of Y on K ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_dat_K_Y <- tibble(Y = seq(from = min(data$Y), to = max(data$Y), length.out = 30),\n                      X = mean(data$X)) # set X to its mean\n\npred_new_dat_K_Y <- predict(mK_XY, newdata = new_dat_K_Y, type = \"link\", se.fit = TRUE)\n\nilink<- family(mK_XY)$linkinv\npredictions_K_Y <- cbind(new_dat_K_Y,data.frame(pred_new_dat_K_Y)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n\npK_Y <- ggplot() +\n  stat_dots(data = data,\n            aes(y = K,\n                x = Y,\n                side = ifelse(K_1 == 0, \"bottom\", \"top\")),\n            size = 2)+\n  geom_line(data = predictions_K_Y, aes(y = Pred, x = Y)) +\n  geom_ribbon(data = predictions_K_Y, aes(ymin = CI.low, ymax = CI.up, x = Y)) +\n  theme_classic() +\n  labs(title = \"Conditional effect of Y on K\")\n\npK_Y \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nSo this is the direct effect of Y on K. But, remember that Y is caused by X so it may be of interest to see how X affects K indirectly, through Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\npY_X\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe first step is to select values of Y that are predicted by X\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCOLS <- alpha(colorRampPalette(c(\"blue\",\"red\"))(30),0.6)\npY_X + geom_point(data = predictions_Y_X, aes(y = Pred, x = X, color = X), size = 4) +scale_color_gradientn(colours = COLS)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThe next step is actually quite simple. We generate predictions for K as a function of the predictions of Y \\~ X\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nnew_dat_K_YX <- tibble(Y = predictions_Y_X$Pred, # predicted mean Y from X\n                      X = mean(data$X)) # set X to its mean\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npred_new_dat_K_YX <- predict(mK_XY, newdata = new_dat_K_YX, type = \"link\", se.fit = TRUE)\n\nilink<- family(mK_XY)$linkinv\npredictions_K_YX <- cbind(new_dat_K_YX,data.frame(pred_new_dat_K_YX)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n```\n:::\n\n\nNow, we need the values of X that were associated with the predicted values of Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_K_YX <- select(predictions_K_YX, c(Y, Pred)) %>%\n  left_join(predictions_Y_X %>% \n              select(X, Pred) %>% \n              rename(Y = Pred), \n            by = \"Y\")\n\npred_K_YX\n```\n:::\n\n\nNow, we simply superimpose both graphs of K \\~ Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\npK_Y \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npK_Y + geom_line(data = pred_K_YX, aes(x = Y, y = Pred, color = X), linewidth= 2) +\n  labs(title = \"Indirect effect of X on K through Y\") + scale_color_gradientn(colours = COLS)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nWe could push this even further and look at indirect effects through a non-monotonous relationship\n\n![](images/ecoevo_teaser.png)\n\nAnd what about interactions?\n\nSimulate data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 3000\n#interacting variables\nX1 <- rnorm(n = n, mean = 0, sd = 1)\nX2 <- rpois(n = n, lambda = 3)\n#mediator\nY <- rpois(n = n, lambda = exp(0 + 0.4*X1 + 0.3*X2 + 0.1*X1*X2))\n#outcome\nK <- rbinom(n = n, size = 1, prob = plogis(-2 + 0.1*X1 + 0.2*X2 + 0.5*X1*X2 - 0.05*Y))\n\ndata <- tibble(\n  X1 = X1,\n  X2 = X2,\n  Y = Y,\n  K = K,\n  K_1 = K - 1\n)\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n      X1    X2     Y     K   K_1\n   <dbl> <int> <int> <int> <dbl>\n1  1.49      4    12     1     0\n2  0.582     4     6     0    -1\n3  1.30      1     3     0    -1\n4 -2.01      1     0     0    -1\n5  1.64      3     7     1     0\n6  0.260     2     3     1     0\n```\n:::\n:::\n\n\nModels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmY_X <- glmmTMB(Y ~  X1 + X2 + X1*X2, family = poisson, data = data)\n\nmK_XY <- glmmTMB(K ~ X1 + X2 + X1*X2 + Y, family = binomial, data = data)\n```\n:::\n\n\nPredictions\n\nY \\~ X\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_data_YX <- expand_grid(X1 = c(-1, 0, 1),\n                           X2 = seq(from = min(data$X2), to = max(data$X2), length.out = 30))\n\n\npred_new_dat_Y_X <- predict(mY_X, newdata = new_data_YX, type = \"link\", se.fit = TRUE) # predict on link scale\n\nilink<- family(mY_X)$linkinv # extract inverse link (exponential in this case)\n\n#calculate confidence intervals on link scale and back transform\npredictions_Y_X <- cbind(new_data_YX,data.frame(pred_new_dat_Y_X)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n\nggplot() +\n  geom_ribbon(data = predictions_Y_X, aes(ymin = CI.low, ymax = CI.up, x = X2, fill = as.factor(X1)), alpha = 0.2) +\n  geom_line(data = predictions_Y_X, aes(y = Pred, x = X2, color = as.factor(X1))) +\n  labs(y = \"Y\",\n       title = \"Interacting effect of X1 & X2 on Y\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nK \\~ X \\| Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_data_KX <- expand_grid(X1 = c(-1, 0, 1),\n                           X2 = seq(from = min(data$X2), to = max(data$X2), length.out = 30),\n                           Y = mean(data$Y))\n\n\npred_new_dat_K_X <- predict(mK_XY, newdata = new_data_KX, type = \"link\", se.fit = TRUE) # predict on link scale\n\nilink<- family(mK_XY)$linkinv # extract inverse link (inverse logit in this case)\n\n#calculate confidence intervals on link scale and back transform\npredictions_K_X <- cbind(new_data_KX,data.frame(pred_new_dat_K_X)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n\npK_X <- ggplot() +\n  geom_ribbon(data = predictions_K_X, aes(ymin = CI.low, ymax = CI.up, x = X2, fill = as.factor(X1)), alpha = 0.2) +\n  geom_line(data = predictions_K_X, aes(y = Pred, x = X2, color = as.factor(X1)))+\n  labs(y = \"K\",\n       title = \"Interacting effect of X1 & X2 on K\",\n       fill = \"X1\",\n       color = \"X1\") +\n  theme_classic()+theme(legend.position = c(0.1, 0.5))\n\npK_X\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nK \\~ Y \\| X\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_data_KY <- expand_grid(X1 = mean(data$X1),\n                           X2 = mean(data$X2),\n                           Y = seq(from = min(data$Y), to = max(data$Y), length.out = 30))\n\n\npred_new_dat_K_Y <- predict(mK_XY, newdata = new_data_KY, type = \"link\", se.fit = TRUE) # predict on link scale\n\nilink<- family(mK_XY)$linkinv # extract inverse link (inverse logit in this case)\n\n#calculate confidence intervals on link scale and back transform\npredictions_K_Y <- cbind(new_data_KY,data.frame(pred_new_dat_K_Y)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit))\n\nggplot() +\n  geom_ribbon(data = predictions_K_Y, aes(ymin = CI.low, ymax = CI.up, x = Y), alpha = 0.2) +\n  geom_line(data = predictions_K_Y, aes(y = Pred, x = Y))+\n  labs(y = \"K\",\n       title = \"Effect of Y on K\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nK \\~ E(Y\\|X)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npY_X <- ggplot() +\n  geom_ribbon(data = predictions_Y_X, aes(ymin = CI.low, ymax = CI.up, x = X2, fill = as.factor(X1)), alpha = 0.2) +\n  geom_line(data = predictions_Y_X, aes(y = Pred, x = X2, color = as.factor(X1))) +\n  geom_point(data = predictions_Y_X, aes(y = Pred, x = X2, color = as.factor(X1))) +\n  labs(y = \"Y\",\n       title = \"Interacting effect of X1 & X2 on Y\",\n       color = \"X1\",\n       fill = \"X1\") +\n  theme_classic() +theme(legend.position = c(0.2, 0.5))\n\npY_X\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nneed to predict K for the different predicted values of Y \\~ X\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_data_KYX <- tibble(\n  Y = predictions_Y_X$Pred,\n  X1 = mean(data$X1),\n  X2 = mean(data$X2)\n)\n\npred_new_dat_K_YX <- predict(mK_XY, newdata = new_data_KYX, type = \"link\", se.fit = TRUE) # predict on link scale\n\nilink<- family(mK_XY)$linkinv # extract inverse link (inverse logit in this case)\n\n#calculate confidence intervals on link scale and back transform\npredictions_K_YX <- cbind(new_data_KYX,data.frame(pred_new_dat_K_YX)) %>%\n  mutate(CI.up = ilink(fit + (1.96*se.fit)),\n         CI.low = ilink(fit - (1.96*se.fit)),\n         Pred=ilink(fit)) %>%\n  select(-c(X1, X2)) %>% #remove X1 and X2 that are set to their means as we don't need them\n  mutate(X1 = predictions_Y_X$X1, \n         X2 = predictions_Y_X$X2)  # add the values of X1 and X2 that were used to predict Y\n  \nCOLS <- alpha(colorRampPalette(c(\"blue\",\"red\"))(30),0.6)\nggplot() +\n  geom_ribbon(data = predictions_K_YX, aes(ymin = CI.low, ymax = CI.up, x = Y, fill = as.factor(X1)), alpha = 0.2) +\n  geom_line(data = predictions_K_YX, aes(y = Pred, x = Y,  color = X2))+\n  scale_color_gradientn(colours = COLS)+\n  labs(y = \"K\",\n       title = \"Effect of X1*X2 on K through Y\",\n       fill = \"X1\") +\n  theme_classic() +\n  facet_wrap(~as.factor(X1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nMake it \"pretty\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfacet_labels_X1 <- as_labeller(\n  c(\n    `-1` = \"X1 = -1\",\n    `0` = \"X1 = 0\",\n    `1` = \"X1 = 1\"\n  ))\npK_XY <- ggplot() +\n  geom_ribbon(data = predictions_K_YX, aes(ymin = CI.low, ymax = CI.up, x = Y, fill = as.factor(X1)), alpha = 0.2) +\n  geom_line(data = predictions_K_YX, aes(y = Pred, x = Y,  color = X2), linewidth = 2)+\n  scale_color_gradientn(colours = COLS)+\n  labs(\n       title = \"Effect of X1*X2 on K through Y\") +\n  guides(fill = \"none\") +\n  theme_classic() +\n  facet_wrap(~as.factor(X1), labeller = facet_labels_X1)+\n  theme(legend.position = c(0.2, 0.5),\n        axis.line.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank())\n\npK_XY\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\npK_Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\npK_Y <- ggplot() +\n  geom_ribbon(data = predictions_K_Y, aes(ymin = CI.low, ymax = CI.up, x = Y), alpha = 0.2) +\n  geom_line(data = predictions_K_Y, aes(y = Pred, x = Y))+\n  labs(y = \"K\",\n       title = \"Effect of Y on K\") +\n  coord_cartesian(xlim = c(0, 100)) +\n  theme_classic()\n\npK_Y\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\npatchwork\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatch_K_Y <- pK_Y + pK_XY + plot_annotation(caption = \"X1 is a strong mediator of the indirect effect of X2 on K through Y\")\n\npatch_K_Y\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nBring it all together\n\n![](images/ecoevo_teaser_interact.png)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}